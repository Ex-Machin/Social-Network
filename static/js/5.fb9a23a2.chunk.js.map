{"version":3,"sources":["components/FormsControl/FormControls.module.css","components/FormsControl/FormsControl.tsx","utils/validators/validators.ts","components/Dialogs/Dialogs.module.css","hoc/WithAuthRedirect.js","components/Dialogs/DialogItem/Dialog.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FromControl","meta","touched","error","children","hasError","className","styles","TextArea","props","input","restProps","Input","createField","placeholder","name","validators","component","validate","required","value","maxLengthCreator","maxLenght","length","undefined","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","path","s","dialog","active","to","Message","messageContent","message","maxLength50","AddReduxMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","Dialogs","dialogsPage","sendMessage","dialogs","dialogsItems","map","item","Dialog","id","messages","values","newMessageBody","compose","Component","RedirectComponent","this","React","connect","dispatch","actions","sendMessageCreator"],"mappings":"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","file":"static/js/5.fb9a23a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormControls_form-control__2LeGj\",\"error\":\"FormControls_error__1Z7Z-\",\"form-summary-error\":\"FormControls_form-summary-error__2KQQc\"};","import React from 'react';\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../utils/validators/validators\";\r\nimport styles from \"./FormControls.module.css\";\r\n\r\ninterface FromControlProps extends WrappedFieldProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst FromControl: React.FC<FromControlProps> = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n\r\n  return (\r\n    <div className={styles[\"form-control\"] + \" \" + (hasError && styles.error)}>\r\n      <div>{children}</div>\r\n      <div>{hasError && <span> {error}</span>}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FromControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FromControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FromControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FromControl>\r\n  );\r\n};\r\n\r\nexport function createField<T extends string | undefined>(placeholder: string | undefined,\r\n  name: T,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  props = {},\r\n  text = \"\") {\r\n  return (\r\n\r\n    (\r\n      <div>\r\n        <Field placeholder={placeholder} name={name}\r\n          validate={validators}\r\n          component={component}\r\n          {...props} />\r\n      </div>\r\n    )\r\n  )\r\n}","export type FieldValidatorType = (value:string) => string | undefined  \r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (!!value) {\r\n    return undefined;\r\n  }\r\n\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLenght: number): FieldValidatorType => (value) => {\r\n  return  value.length > maxLenght ? `Max length is ${maxLenght} symbols` : undefined\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Kl76\",\"dialogsItems\":\"Dialogs_dialogsItems__1HS3-\",\"dialog\":\"Dialogs_dialog__1N8yx\",\"active\":\"Dialogs_active__3OS0v\",\"messages\":\"Dialogs_messages__sj4kZ\",\"message\":\"Dialogs_message__2MqTs\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype PropsTypes = {\r\n  name: string\r\n  path: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsTypes> = ({ name, path }) => {\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={`/dialogs/${path}`}>{name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n  messageContent: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = ({ messageContent }) => {\r\n  return <div className={s.message}>{messageContent}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { required, maxLengthCreator } from \"../../utils/validators/validators\";\r\nimport { TextArea } from \"../FormsControl/FormsControl\";\r\nimport DialogItem from \"./DialogItem/Dialog\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport Message from \"./Messages/Messages\";\r\n\r\nconst Dialogs = ({ dialogsPage, sendMessage }) => {\r\n\r\n  const addNewMessage = (values) => {\r\n    sendMessage(values.newMessageBody);\r\n  } \r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsPage.dialogs.map((item) => {\r\n          return <DialogItem key={item.id} name={item.name} path={item.id} />;\r\n        })}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {dialogsPage.messages.map((item) => {\r\n          return <Message messageContent={item.message} key={item.id} />;\r\n        })}\r\n      </div>\r\n      <AddReduxMessageForm onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50); \r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={TextArea}\r\n          validate={[required, maxLength50]}\r\n          name=\"newMessageBody\"\r\n          placeholder=\"Enter your message\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add Post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddReduxMessageForm = reduxForm({ form: \"dialogAddMessageForm\" })(\r\n  AddMessageForm\r\n);\r\n\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { WithAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { initialStateType, actions } from \"../../redux/dialogsReducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\ntype MapStatePropsType = {\r\n  dialogsPage: initialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet MapDispatchProps = (dispatch: any) => {\r\n  return {\r\n    sendMessage: (newMessageBody: any) => {\r\n      dispatch(actions.sendMessageCreator(newMessageBody))\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  WithAuthRedirect,\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, MapDispatchProps)\r\n)(Dialogs);\r\n"],"sourceRoot":""}