{"version":3,"sources":["components/FormsControl/FormControls.module.css","utils/validators/validators.js","components/FormsControl/FormsControl.js","components/Login/Login.jsx"],"names":["module","exports","required","value","maxLengthCreator","maxLenght","length","FromControl","input","meta","touched","error","children","hasError","className","styles","TextArea","props","restProps","child","Input","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","placeholder","name","component","validate","type","connect","state","isAuth","auth","login","to","email","password","rememberMe"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,eAAe,mCAAmC,MAAQ,4BAA4B,qBAAqB,2C,iCCD7H,oEAAO,IAAMC,EAAW,SAACC,GACvB,IAAMA,EAIN,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,GAAIA,EAAMG,OAASD,EACjB,MAAM,iBAAN,OAAwBA,EAAxB,e,wMCREE,EAAc,SAAC,GAAkD,EAAhDC,MAAiD,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SAChDC,EAAWH,GAAWC,EAE5B,OACE,sBAAKG,UAAWC,IAAO,gBAAkB,KAAOF,GAAYE,IAAOJ,OAAnE,UACE,8BAAMC,IACN,8BAAMC,GAAY,qCAAQF,WAKnBK,EAAW,SAACC,GACvB,IAAQT,EAAqCS,EAArCT,MAAuBU,GAAcD,EAA9BR,KAA8BQ,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,cAACV,EAAD,2BAAiBU,GAAjB,aACE,oDAAcT,GAAWU,QAKlBE,EAAQ,SAACH,GACpB,IAAQT,EAAqCS,EAArCT,MAAuBU,GAAcD,EAA9BR,KAA8BQ,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,cAACV,EAAD,2BAAiBU,GAAjB,aACE,iDAAWT,GAAWU,S,iCC1B5B,oGA2CMG,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EAlCL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcb,EAAW,EAAXA,MAChC,OACE,uBAAMc,SAAUD,EAAhB,UACE,8BACE,cAAC,IAAD,CACEE,YAAa,QACbC,KAAM,QACNC,UAAWR,IACXS,SAAU,CAAC3B,SAGf,8BACE,cAAC,IAAD,CACEwB,YAAa,WACbC,KAAM,WACNC,UAAWR,IACXS,SAAU,CAAC3B,KACX4B,KAAK,eAGT,gCACE,cAAC,IAAD,CAAOA,KAAM,WAAYH,KAAM,aAAcC,UAAWR,MAD1D,iBAICT,GACC,qBAAKG,UAAWC,IAAO,sBAAvB,SAA+CJ,IAEjD,8BACE,mDA+BOoB,uBAJS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAGmB,CAAEE,WAA3BJ,EArBD,SAACd,GAKb,OAAIA,EAAMgB,OACD,cAAC,IAAD,CAAUG,GAAI,aAIrB,gCACE,uCACA,cAACf,EAAD,CAAgBI,SAXH,SAAC,GAAqC,IAAnCY,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACnCtB,EAAMkB,MAAME,EAAOC,EAAUC","file":"static/js/6.7c32d3cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormControls_form-control__pj4lY\",\"error\":\"FormControls_error__18c5z\",\"form-summary-error\":\"FormControls_form-summary-error__2S4wK\"};","export const required = (value) => {\n  if (!!value) {\n    return undefined;\n  }\n\n  return \"Field is required\";\n};\n\nexport const maxLengthCreator = (maxLenght) => (value) => {\n  if (value.length > maxLenght) {\n    return `Max length is ${maxLenght} symbols`;\n  }\n\n  return undefined;\n};\n","import styles from \"./FormControls.module.css\";\n\nconst FromControl = ({ input, meta: { touched, error }, children }) => {\n  const hasError = touched && error;\n\n  return (\n    <div className={styles[\"form-control\"] + \" \" + (hasError && styles.error)}>\n      <div>{children}</div>\n      <div>{hasError && <span> {error}</span>}</div>\n    </div>\n  );\n};\n\nexport const TextArea = (props) => {\n  const { input, meta, child, ...restProps } = props;\n  return (\n    <FromControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FromControl>\n  );\n};\n\nexport const Input = (props) => {\n  const { input, meta, child, ...restProps } = props;\n  return (\n    <FromControl {...props}>\n      <input {...input} {...restProps} />\n    </FromControl>\n  );\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { required } from \"../../utils/validators/validators\";\nimport { Input } from \"../FormsControl/FormsControl\";\nimport { login } from \"../../redux/auth-reducer\";\nimport { Navigate } from \"react-router-dom\";\nimport styles from '../FormsControl/FormControls.module.css';\n\nconst LoginForm = ({handleSubmit, error}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field\n          placeholder={\"Email\"}\n          name={\"email\"}\n          component={Input}\n          validate={[required]}\n        />\n      </div>\n      <div>\n        <Field\n          placeholder={\"Password\"}\n          name={\"password\"}\n          component={Input}\n          validate={[required]}\n          type=\"password\"\n        />\n      </div>\n      <div>\n        <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input} />\n        remember me\n      </div>\n      {error && (\n        <div className={styles[\"form-summary-error\"]}>{error}</div>\n      )}\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm({\n  form: \"login\",\n})(LoginForm);\n\nconst Login = (props) => {\n  const onSubmit = ({ email, password, rememberMe }) => {\n    props.login(email, password, rememberMe);\n  };\n\n  if (props.isAuth) {\n    return <Navigate to={\"/profile\"} />;\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginReduxForm onSubmit={onSubmit} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n})\n\nexport default connect(mapStateToProps, { login })(Login);\n"],"sourceRoot":""}