{"version":3,"sources":["components/FormsControl/FormControls.module.css","components/FormsControl/FormsControl.tsx","utils/validators/validators.ts","components/Login/Login.tsx"],"names":["module","exports","FromControl","meta","touched","error","children","hasError","className","styles","TextArea","props","input","restProps","Input","createField","placeholder","name","validators","component","validate","required","value","maxLengthCreator","maxLenght","length","undefined","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","connect","state","auth","isAuth","login","to","email","password","rememberMe","captcha"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,eAAe,mCAAmC,MAAQ,4BAA4B,qBAAqB,2C,0OCQvHC,EAA0C,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACrEC,EAAWH,GAAWC,EAE5B,OACE,sBAAKG,UAAWC,IAAO,gBAAkB,KAAOF,GAAYE,IAAOJ,OAAnE,UACE,8BAAMC,IACN,8BAAMC,GAAY,qCAAQF,WAMnBK,EAAwC,SAACC,GACpD,IAAQC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBR,KAAf,YAAsCQ,EAAtC,IACA,OACE,cAACT,EAAD,2BAAiBS,GAAjB,aACE,oDAAcC,GAAWC,QAKlBC,EAAqC,SAACH,GACjD,IAAQC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBR,KAAf,YAAsCQ,EAAtC,IACA,OACE,cAACT,EAAD,2BAAiBS,GAAjB,aACE,iDAAWC,GAAWC,QAKrB,SAASE,EAA0CC,EACxDC,EACAC,EACAC,GAEY,IADZR,EACW,uDADH,GAER,OAGI,8BACE,cAAC,IAAD,aAAOK,YAAaA,EAAaC,KAAMA,EACrCG,SAAUF,EACVC,UAAWA,GACPR,Q,iCClDd,oEAAO,IAAMU,EAA+B,SAACC,GAC3C,IAAMA,EAIN,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GAC1E,OAAQA,EAAMG,OAASD,EAAf,wBAA4CA,EAA5C,iBAAkEE,K,iCCX5E,sFA+BMC,EAAiBC,YAAkD,CAAEC,KAAM,SAA1DD,EAlBoF,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAczB,EAAwB,EAAxBA,MAAO0B,EAAiB,EAAjBA,WACjI,OACE,uBAAMC,SAAUF,EAAhB,UACGf,YAAmC,QAAS,QAAS,CAACM,KAAWP,KACjEC,YAAmC,WAAY,WAAY,CAACM,KAAWP,IAAO,CAAEmB,KAAM,aACtFlB,iBAAmCW,EAAW,aAAc,GAAIZ,IAAO,CAAEmB,KAAM,YAAc,eAE7FF,GAAc,qBAAKG,IAAKH,EAAYI,IAAI,KACxCJ,GAAchB,YAAmC,qBAAsB,UAAW,CAACM,KAAWP,IAAO,IAErGT,GAAS,qBAAKG,UAAWC,IAAO,sBAAvB,SAA+CJ,IACzD,8BACE,mDAgDO+B,uBALS,SAACC,GAAD,MAA6C,CACnEN,WAAYM,EAAMC,KAAKP,WACvBQ,OAAQF,EAAMC,KAAKC,UAGmB,CAAEC,WAA3BJ,EAtBmD,SAACzB,GAKjE,OAAIA,EAAM4B,OACD,cAAC,IAAD,CAAUE,GAAI,aAIrB,gCACE,uCACA,cAACd,EAAD,CAAgBK,SAXH,SAAC,GAAmD,IAAjDU,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,QAC/ClC,EAAM6B,MAAME,EAAOC,EAAUC,EAAYC,IAUHd,WAAYpB,EAAMoB","file":"static/js/6.c267ae31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormControls_form-control__2LeGj\",\"error\":\"FormControls_error__1Z7Z-\",\"form-summary-error\":\"FormControls_form-summary-error__2KQQc\"};","import React from 'react';\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../utils/validators/validators\";\r\nimport styles from \"./FormControls.module.css\";\r\n\r\ninterface FromControlProps extends WrappedFieldProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst FromControl: React.FC<FromControlProps> = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n\r\n  return (\r\n    <div className={styles[\"form-control\"] + \" \" + (hasError && styles.error)}>\r\n      <div>{children}</div>\r\n      <div>{hasError && <span> {error}</span>}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FromControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FromControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FromControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FromControl>\r\n  );\r\n};\r\n\r\nexport function createField<T extends string | undefined>(placeholder: string | undefined,\r\n  name: T,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  props = {},\r\n  text = \"\") {\r\n  return (\r\n\r\n    (\r\n      <div>\r\n        <Field placeholder={placeholder} name={name}\r\n          validate={validators}\r\n          component={component}\r\n          {...props} />\r\n      </div>\r\n    )\r\n  )\r\n}","export type FieldValidatorType = (value:string) => string | undefined  \r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (!!value) {\r\n    return undefined;\r\n  }\r\n\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLenght: number): FieldValidatorType => (value) => {\r\n  return  value.length > maxLenght ? `Max length is ${maxLenght} symbols` : undefined\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport styles from '../FormsControl/FormControls.module.css';\r\nimport { createField, Input } from \"../FormsControl/FormsControl\";\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField<LoginFormOwnPropsKeys>(\"Email\", \"email\", [required], Input)}\r\n      {createField<LoginFormOwnPropsKeys>(\"Password\", \"password\", [required], Input, { type: \"password\" })}\r\n      {createField<LoginFormOwnPropsKeys>(undefined, \"rememberMe\", [], Input, { type: \"checkbox\" }, \"remember me\")}\r\n\r\n      {captchaUrl && <img src={captchaUrl} alt=\"\" />}\r\n      {captchaUrl && createField<LoginFormOwnPropsKeys>(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n\r\n      {error && <div className={styles[\"form-summary-error\"]}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: \"login\" })(LoginForm);\r\n\r\ntype MapStatePropsType = {\r\n  captchaUrl: string | null\r\n  isAuth: boolean | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n  captcha: string\r\n  rememberMe: boolean\r\n  password: string\r\n  email: string\r\n}\r\n\r\ntype LoginFormOwnPropsKeys = Extract<keyof LoginFormValuesType, string>\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n  const onSubmit = ({ email, password, rememberMe, captcha }: any) => {\r\n    props.login(email, password, rememberMe, captcha);\r\n  };\r\n\r\n  if (props.isAuth) {\r\n    return <Navigate to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  captchaUrl: state.auth.captchaUrl,\r\n  isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"sourceRoot":""}